core.clearAll()
//Group 20 Objects
for (i=0; i < 20;++i)
{
  primitivesgenerator.addSphere()
}
datacontrol.setAllTarget()
var list = datacontrol.getTargetObjects(DataType("TriangleMesh"));

//Check, if group was created
groupid = datacontrol.groupObjects(list)
if (groupid == -1)
{
  print("unable to create a group with 20 objects")
  core.exitFailure()
}

if (datacontrol.groupCount() != 1)
{
  print("Group 20 Objects failed")
  print("unexpected group count")
  print("number of groups: " + datacontrol.groupCount())
  print("expected number of groups: 1") 
  core.exitFailure()
}
datacontrol.clearAllTarget()

//Group Object and Group
id = primitivesgenerator.addSphere()
list = [groupid,id]
datacontrol.groupObjects(list)
if (datacontrol.groupCount() != 2)
{
  print("Group Object and Group failed")
  print("unexpected group count")
  print("number of groups: " + datacontrol.groupCount())
  print("expected number of groups: 2") 
  core.exitFailure()
}
datacontrol.clearAllTarget()

//Group multiple Groups
id = primitivesgenerator.addSphere()
id2 = primitivesgenerator.addSphere()
list = [id2,id]
groupid2 = datacontrol.groupObjects(list)

if (datacontrol.groupCount() != 3)
{
  print("Group multiple Groups failed")
  print("unexpected group count")
  print("number of groups: " + datacontrol.groupCount())
  print("expected number of groups: 3") 
  core.exitFailure()
}

//Ungroup
datacontrol.unGroupObject(groupid2)
if (datacontrol.groupCount() != 2)
{
  print("Ungroup failed")
  print("unexpected group count")
  print("number of groups: " + datacontrol.groupCount())
  print("expected number of groups: 2") 
  core.exitFailure()
}

//add object to existing group
core.clearAll()
id1 = primitivesgenerator.addSphere()
id2 = primitivesgenerator.addSphere()
id3 = primitivesgenerator.addSphere()

groupid = datacontrol.groupObjects([id1,id2])
datacontrol.addObjectToGroup(id3,groupid)

datacontrol.groupObjects([id1,id2,id3])//Can be done, if all objects are in the same group
if (datacontrol.groupCount() != 2)
{
  print("Add to Group failed.")
  print("unexpected group count")
  print("number of groups: " + datacontrol.groupCount())
  print("expected number of groups: 2") 
  core.exitFailure()
}

if (datacontrol.addObjectToGroup(id3,id2))
{
  print("Could add an object to an object which is not a Group.")
  core.exitFailure();
}

//Get group elements
id1 = primitivesgenerator.addSphere()
id2 = primitivesgenerator.addSphere()
elements = [id1,id2]
groupid = datacontrol.groupObjects(elements)
resuldList = datacontrol.getGroupElements(groupid)

if (resuldList.length != elements.length)
{
  print("error: getGroupElements")
  print("number of received elements is: "+elements.length+" expected was: "+resuldList.length)
  core.exitFailure();
}
for (i = 0; i < resultId; ++i)
{
   if (!resuldList.hasObject(groupId[i]))
  {
    print("error: getGroupElements")
    print("id of received object differs")
    print("expected was: "+groupId[i]+" result is: "+resuldIdList[i])
    core.exitFailure();
  }
}
