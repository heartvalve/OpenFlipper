
################################################################################
# INCLUDE Packages
################################################################################

#ADDLIBDEBUG = true

# CGAL
CGAL_PATH_INC		= C:\CGAL-3.4\include
CGAL_PATH_LIB		= /usr/lib

defineTest( cgal ) {

	exists ( $${CGAL_PATH_INC} ) {
		
#		addLib ( /usr/lib $${CGAL_PATH_LIB}, CGAL ) {
#			addLib ( /usr/lib $${CGAL_PATH_LIB}, CGAL_Core ) {
#				addLib ( /usr/lib $${CGAL_PATH_LIB}, CGAL_ImageIO ) {
#					addLib ( /usr/lib $${CGAL_PATH_LIB}, CGAL_PDB ) {
#						addLib ( /usr/lib $${CGAL_PATH_LIB}, CGAL_Qt4 ) {

						        # disabled due to compiler errors with gmp
  						        #INCLUDEPATH *= $${CGAL_PATH_INC}
  						        #export(INCLUDEPATH)
							DEFINES += CGAL_USE_F2C
							export(DEFINES)
						

							return(true)
#						}
#					}
#				}
#			}
#		}
	} else {
		message ( WARNING: cgal header files not found! )
	}

	return(false)
}



defineTest( glew ) {

  #######################################
  ## Enter here the correct path to GLEW
  #######################################

  GLEW_PATH = c:\glew

  ######################################

  INCLUDEPATH *= $${GLEW_PATH}\include
  export(INCLUDEPATH)  

  !addLib( $${GLEW_PATH}\lib , glew32 ) {
    error (ERROR: GLEW not found or wrong path entry in qmake\packages\packages.Windows!) 
  }
}

defineTest( qt ) {

}

defineTest( glut ) {

  #######################################
  ## Enter here the correct path to GLUT
  #######################################

  GLUT_PATH = C:\libs\glut-3.7

  #######################################

  INCLUDEPATH *= $${GLUT_PATH}\include
  export(INCLUDEPATH)

  !addLib( $${GLUT_PATH}\lib , glut32) {
    error (ERROR: GLUT not found or wrong path entry in qmake\packages\packages.Windows!) 
  }

}

defineTest( acg ) {
  DEFINES *= INCLUDE_TEMPLATES
  DEFINES *= _USE_MATH_DEFINES NOMINMAX
  export(DEFINES)
  contains( OPENFLIPPER , OpenFlipper ){
    LIBS+= -L$${TOPDIR}/OpenFlipper/$${BUILDDIRECTORY} -lACG
    INCLUDEPATH += $${TOPDIR}/ACG/include
#    message(Using internal ACG Library of OpenFlipper)
  } else {
    INCLUDEPATH += $${TOPDIR}/ACG/include
    QMAKE_LIBDIR += $${TOPDIR}/ACG/lib/$${BUILDDIRECTORY}
    LIBS+= -L$${TOPDIR}/ACG/lib/$${BUILDDIRECTORY} -lACG
    export(QMAKE_LIBDIR)
  }
  export(INCLUDEPATH)
  export(LIBS)
}

defineTest( openmesh ) {
  INCLUDEPATH += $${TOPDIR}/OpenMesh/src

  QMAKE_LIBDIR += $${TOPDIR}/OpenMesh/lib

  CONFIG( debug, debug|release ){
    LIBS+= -L$${TOPDIR}/OpenFlipper/$${BUILDDIRECTORY} -lOpenMeshCored
    LIBS+= -L$${TOPDIR}/OpenFlipper/$${BUILDDIRECTORY} -lOpenMeshToolsd
  } else {
    LIBS+= -L$${TOPDIR}/OpenFlipper/$${BUILDDIRECTORY} -lOpenMeshCore
    LIBS+= -L$${TOPDIR}/OpenFlipper/$${BUILDDIRECTORY} -lOpenMeshTools
  }

  QMAKE_LIBDIR += $${TOPDIR}/OpenFlipper/$${BUILDDIRECTORY} 
  
  DEFINES *= INCLUDE_TEMPLATES
  DEFINES *= _USE_MATH_DEFINES NOMINMAX
  
  export(INCLUDEPATH)
  export(QMAKE_LIBDIR)
  export(LIBS)
}


defineTest( openmesh ) {
  INCLUDEPATH += $${TOPDIR}/OpenMesh/src
  QMAKE_LIBDIR += $${TOPDIR}/OpenMesh/lib

  DEFINES *= INCLUDE_TEMPLATES
  DEFINES *= _USE_MATH_DEFINES NOMINMAX

  CONFIG( debug, debug|release ){
    LIBS+= -L$${TOPDIR}/OpenMesh/lib -lOpenMeshCored
    LIBS+= -L$${TOPDIR}/OpenMesh/lib -lOpenMeshToolsd
  } else {
    LIBS+= -L$${TOPDIR}/OpenMesh/lib -lOpenMeshCore
    LIBS+= -L$${TOPDIR}/OpenMesh/lib -lOpenMeshTools
  }

  export(INCLUDEPATH)
  export(DEFINES)
  export(QMAKE_LIBDIR)
  export(LIBS)
}

defineTest( qwt ) {

  #######################################
  ## Enter here the correct path to qwt
  #######################################

  QWT_PATH = C:\qwt

  #######################################


  INCLUDEPATH *= $${QWT_PATH}\src
  export(INCLUDEPATH)

  !addLib( $${QWT_PATH}\lib , qwt5) {
    message (WARNING: QWT not found or wrong path entry in qmake\packages\packages.Windows!) 
    return(false)
  } else {
    DEFINES *= USE_QWT
    export(DEFINES)
    return(true)
  }

}


defineTest( openmp ) {
	QMAKE_CXXFLAGS_DEBUG += /openmp
	QMAKE_CXXFLAGS_RELEASE += /openmp
	export(QMAKE_CXXFLAGS_DEBUG)
	export(QMAKE_CXXFLAGS_RELEASE)
}

defineTest( gmm ) {

  #######################################
  ## Enter here the correct path to GMM
  #######################################

  GMM_PATH = C:\libs\gmm-3.0

  #######################################

  !exists( $${GMM_PATH} ) {
    error( ERROR: GMM not found or wrong path entry in OpenMesh\qmake\packages\packages.Windows! )
  }

  INCLUDEPATH += $${GMM_PATH}\include
  DEFINES *= _SCL_SECURE_NO_DEPRECATE
  export(DEFINES) 
  export(INCLUDEPATH)
}

defineTest( wordnet ) {

  ##########################################
  ## Enter here the correct path to wordnet
  ##########################################

  WN_PATH = C:\Program Files\WordNet\2.1

  ##########################################

  !exists( $${WN_PATH} ) {
    error( ERROR: Wordnet not found or wrong path entry in OpenMesh\qmake\packages\packages.Windows! )
  }
  

  INCLUDEPATH *= $${WN_PATH}\src\include
  export(INCLUDEPATH)
  LIBS += -l$${WN_PATH}\lib\wn
  export(LIBS)
}

defineTest( lapack ) {

  ##############################################
  ## Enter here the correct path to lapack libs
  ##############################################

  LAP_LIB_PATH = C:\CLAPACK\LIB\Win32

  ##############################################

  !exists( $${LAP_LIB_PATH} ) {
    error( ERROR: lapack not found or wrong path entry in OpenMesh\qmake\packages\packages.Windows! )
  }

  LIBS *= -L$${LAP_LIB_PATH} -lclapack_nowrap -lblas_nowrap -llibf2c -ltmglib_nowrap
  LIBS *= /NODEFAULTLIB:"libcmt"
  export(LIBS)
}

defineTest( taucs ) {

  #########################################
  ## Enter here the correct path to taucs
  #########################################

  TAUCS_PATH = C:\taucs

  #########################################

  !exists( $${TAUCS_PATH} ) {
    error( ERROR: taucs not found or wrong path entry in OpenMesh\qmake\packages\packages.Windows! )
  }

  LIBS *= -L$${TAUCS_PATH}\lib -llibtaucs
  INCLUDEPATH += $${TAUCS_PATH}\include
  export(INCLUDEPATH)
  export(LIBS)
}

defineTest( superlu ) {

  ###########################################
  ## Enter here the correct path to superlu
  ###########################################

  SLU_PATH = C:\SuperLU_3.0

  ###########################################

  !exists( $${SLU_PATH} ) {
    error( ERROR: SuperLU not found or wrong path entry in OpenMesh\qmake\packages\packages.Windows! )
  }

  INCLUDEPATH *= $${SLU_PATH}
  CONFIG( debug, debug|release ){
    LIBS *= -L$${SLU_PATH}\lib -lSuperLUd
  } else {
    LIBS *= -L$${SLU_PATH}\lib -lSuperLU
  }
  export(INCLUDEPATH)
  export(LIBS)
}

defineTest( physim2 ) {
  REQUIRES += PhysimLibrary
  export(REQUIRES)
  message( TODO : Windows physim2 )
}

defineTest( usb ) {
  REQUIRES += USBLibrary
  export(REQUIRES)
  message( TODO : Windows usb )
}

defineTest( freetype ) {

  ###########################################
  ## Enter here the correct path to freetype
  ###########################################

  FT_PATH = C:\GnuWin32

  ###########################################

  !exists( $${FT_PATH} ) {
    message( WARNING: FreeType not found or wrong path entry in OpenMesh\qmake\packages\packages.Windows! )
    return(false)
  }

  !addLib( $${FT_PATH}\lib , freetype) {
    error (ERROR: freetype not found or wrong path entry in qmake\packages\packages.Windows!) 
    return(false)
  } else {
    INCLUDEPATH += $$quote($${FT_PATH}\include) $$quote($${FT_PATH}\include\freetype2) 
    export(INCLUDEPATH)
    return(true)
  }


  return(true)
}

defineTest( ftgl ) {

  #########################################
  ## Enter here the correct path to FTGL
  #########################################

  FTGL_PATH = C:\ftgl

  #########################################


  !freetype() {
    error ( ERROR: FTGL requires FreeType but FreeType was not found )
  }
  

  CONFIG( debug, debug|release ){
    addLib( $${FTGL_PATH}\msvc\Build , ftgl_D ) {
      DEFINES += USE_FTGL
      INCLUDEPATH *= $${FTGL_PATH}\src 
      export(INCLUDEPATH)
      export(DEFINES)
    } else {
      message( WARNING: FTGL not found or wrong path entry in OpenMesh\qmake\packages\packages.Windows! ) 
    }
  } else {
    addLib( $${FTGL_PATH}\msvc\Build , ftgl ) {
      DEFINES += USE_FTGL
      INCLUDEPATH *= $${FTGL_PATH}\src 
      export(INCLUDEPATH)
      export(DEFINES)
    } else {
      message( WARNING: FTGL not found or wrong path entry in OpenMesh\qmake\packages\packages.Windows! )
    }
  }
  
}



