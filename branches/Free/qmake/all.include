
################################################################################
# This is a library
################################################################################

message("==========================================================")
message("The qmake build system in OpenFlipper is deprecated!")
message("Please use cmake which is the recommended build system now.")
message("Qmake support will be removed in the next Release!")
message("==========================================================")


################################################################################
# Needed Qt packages and build plugin
################################################################################

CONFIG += qt uitools opengl thread debug_and_release silent

QT += opengl network script sql webkit

################################################################################
# Add toplevel directory to include path
# TOPDIR has to be specified in a .qmake.cach file in your projects toplevel 
# directory
################################################################################
INCLUDEPATH = $$quote( $${TOPDIR} )
DEPENDPATH  = $$quote(  $${TOPDIR} )

################################################################################
# Define header Extension
# This will also override the header extension for uic output
# ( Do not change to += otherwise uic output will end with .h ! )
################################################################################
QMAKE_EXT_H = .hh .h

################################################################################
# Architecture detection
################################################################################
include( architecture.include )

################################################################################
# Helper functions
################################################################################
include( functions.include )

################################################################################
# Custom settings for compiler flags and similar
################################################################################
include( compiler.include)

################################################################################
# Extra target definitions
################################################################################
include( targets.include )

################################################################################
# Global package definitions
################################################################################
include( packages/packages.$${SYSTEMTYPE} )

################################################################################
# Local package definitions
# These lines will include a file from a .qmake directory inside your home.
# this file will overwrite existing setting
################################################################################

unix { 
	HOME=$$system(echo ~) 
} 
#else {
	#message( TODO : Define Home in Windows )
#}

exists( $${HOME}/.qmake/config.$${SYSTEMTYPE} ) {
	include( $${HOME}/.qmake/config.$${SYSTEMTYPE} ) 
}

############################################################
# Uncomment the following line if you
# don't want qmake to build a MacOS X
# application bundle
############################################################
# CONFIG -= app_bundle	# Do not build a framework bundle
export(CONFIG)

		
################################################################################
# Set standard build directories 
# ( Everything generated while compiling will go # into a per architecture 
#   directory )
################################################################################
OBJECTS_DIR = tmp/$$BUILDDIRECTORY
MOC_DIR = tmp/$$BUILDDIRECTORY
UI_DIR = tmp/$$BUILDDIRECTORY 

################################################################################
# type definitions
################################################################################

# This function sets all parameters required to build a plugin
defineTest(Plugin) {
	unix{
		TEMPLATE = lib
		DESTDIR = $${TOPDIR}/OpenFlipper/Plugins/$${SYSTEMTYPE}/$${ARCHITECTURE}/$${MODE}
	        export(DESTDIR)	
	}	
	win32 {
		TEMPLATE = vclib
		TARGET = $$replace(TARGET, - , _)
		export(TARGET)
		QMAKE_INCDIR += $${TOPDIR}/OpenFlipper/BasePlugin
		export(QMAKE_INCDIR)       
  		LIBS+= -L$${TOPDIR}/OpenFlipper/$${BUILDDIRECTORY} -lPluginLib		
		export(LIBS)
		DEPENDPATH += $${TOPDIR}/OpenFlipper/$${BUILDDIRECTORY} 
		DEFINES += ACGDLL USEACG PLUGINLIBDLL USEPLUGINLIBDLL
		export(DEFINES)
		export(DEPENDPATH)
		DESTDIR = $${TOPDIR}/OpenFlipper/Plugins/$${SYSTEMTYPE}/$${ARCHITECTURE}/$${MODE}
	        export(DESTDIR)
		glut()
	}
        macx {
 		glut()
		LIBS+= -L$${TOPDIR}/OpenFlipper/PluginLib/lib/$${BUILDDIRECTORY} -lPluginLib
                export(LIBS)

		CONFIG(app_bundle) {
			DESTDIR = $${TOPDIR}/OpenFlipper/$${BUILDDIRECTORY}/OpenFlipper.app/Contents/Plugins/$${SYSTEMTYPE}/$${ARCHITECTURE}/$${MODE}
	       		export(DESTDIR)
		}

        }
	export(TEMPLATE)
	CONFIG *= plugin
	export(CONFIG)
	acg()
	openmesh()
	glew()
	defineTargets()
}

defineTest(Library) {
	unix{
		TEMPLATE = lib
		contains( OPERATING_SYSTEM, Darwin) {
			CONFIG -= static
			export(CONFIG)
		}
	}
	win32 {
		TEMPLATE = vclib
	}
	export(TEMPLATE)
	DESTDIR = lib/$$BUILDDIRECTORY
	export(DESTDIR)
	defineTargets()
	UI_DIR = include
	export(UI_DIR)
}

defineTest(Application) {
	unix {
		TEMPLATE = app
	}
	win32 {
		TEMPLATE = vcapp
	}
	macx {
		CONFIG += x86
		# CONFIG += ppc		# Uncomment to build universal binary

		export( CONFIG )
	}
	export(TEMPLATE)
	DESTDIR = $$BUILDDIRECTORY
	export(DESTDIR)
	defineTargets()
}

# Create target doc which generates the documentation of a
# plugin.

defineTest(Doc) {

	DOCNAME = $$1

	isEmpty(DOCNAME) {
	
		error("Error: No parameter has been specified to Doc()! Usage: Doc(Projectname).")
	} else {

	unix {
		# Get version of doxygen and convert it to integer number
		QCHSUPPORT = $$system("version=`doxygen --version | sed -e 's/\.//g'`;test $version -lt 157 && echo false || echo true")

		contains(QCHSUPPORT, false) {
			message("Doxygen version does not support qt help file generation! Settings will be ignored.")
		}

		dox.target = doc

		contains(QCHSUPPORT, false) {
			dox.commands = doxygen Doxyfile;
		} else {
			dox.commands = 	doxygen Doxyfile; \
					cp Docs/html/*.qch $$TOPDIR/OpenFlipper/Help/; \
					mkdir $$TOPDIR/OpenFlipper/Docs/$$DOCNAME; \
					cp -rf Docs/html $$TOPDIR/OpenFlipper/Docs/$$DOCNAME/
		}

		dox.depends =
		dox.CONFIG =

		export(dox.target)
		export(dox.commands)
		export(dox.depends)
		export(dox.CONFIG)
		export(dox)

		QMAKE_EXTRA_TARGETS += dox

		export(QMAKE_EXTRA_TARGETS)
	}
	win32 {
		message("Automatic documentation build is not yet supported under windows!")
	}

	}
}

defineTest(Subdirs) {
	unix {
        	TEMPLATE = subdirs
	}
	win32 {
		TEMPLATE = vcsubdirs
	}
        export(TEMPLATE)
        CONFIG += ordered
        export(CONFIG)
	defineTargets()
}

