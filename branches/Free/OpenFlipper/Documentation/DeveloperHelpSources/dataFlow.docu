/** \page dataFlow Dataflow
 * 
 * \section quickref Quick references
 * - \ref startup
 * - \ref loadSettings
 * - \ref saveSettings
 * - \ref updateObjects
 * - \ref updateView
 *
 * \section startup Startup process
 * 
 * Starting OpenFlipper invokes the following processes: <br><br>
 * \subsection ref1 References:
 * BaseInterface::initializePlugin(),<br>BaseInterface::pluginsInitialized(),<br>INIInterface::loadIniFileOptions()<br>
 *
 * \image html OpenFlipperStartup.png
 *
 * \section loadSettings Load settings
 *
 * Also see INIInterface
 *
 * \subsection ref2 References:
 * INIInterface::loadIniFileOptions(),<br>INIInterface::loadIniFile(),<br>INIInterface::loadIniFileOptionsLast()<br>
 *
 * \image html loadSettingsFlow.jpg
 *
 * 
 * \section saveSettings Save settings
 *
 * Also see INIInterface
 *
 * \subsection ref3 References:
 * INIInterface::saveIniFileOptions(),<br>INIInterface::saveIniFile(),<br>
 * \image html saveSettingsFlow.jpg
 *
 *
 * \section updateObjects Update objects
 *
 * Each time an object has been modified by a plugin, the plugin has to emit the
 * signal BaseInterface::updatedObject() in order to initiate the core to inform
 * all other plugins about the changes and redraw the scene.
 *
 * Also see BaseInterface
 *
 * \subsection ref4 References:
 * BaseInterface::updatedObject(),<br>BaseInterface::slotObjectUpdated(),<br>
 * \image html ObjectUpdateNotification.png
 *
 *
 * \section updateView Update view
 *
 * A plugin can provoke a redraw of the scene by emitting the signal BaseInterface::updateView().
 *
 * Also see \ref BaseInterface
 *
 * \subsection ref5 References:
 * BaseInterface::updateView(),<br>
 * \image html SceneViewUpdate.png
 *
 */
 
