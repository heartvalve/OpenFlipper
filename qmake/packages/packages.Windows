
################################################################################
# INCLUDE Packages
################################################################################


defineTest( glew ) {

  #######################################
  ## Enter here the correct path to GLEW
  #######################################

  GLEW_PATH = c:\glew

  ######################################

  !exists ( $${GLEW_PATH} ) {
    error (ERROR: GLEW not found or wrong path entry in OpenMesh\qmake\packages\packages.Windows!)
  }
  INCLUDEPATH *= $${GLEW_PATH}\include
  export(INCLUDEPATH)
  LIBS *= -L$${GLEW_PATH}\lib -lglew32
  export(LIBS)
}

defineTest( qt ) {

}

defineTest( glut ) {

  #######################################
  ## Enter here the correct path to GLUT
  #######################################

  GLUT_PATH = c:\glut

  #######################################

  !exists ( $${GLUT_PATH} ) {
    error (ERROR: GLUT not found or wrong path entry in OpenMesh\qmake\packages\packages.Windows!)
  }
  INCLUDEPATH *= $${GLUT_PATH}\include
  export(INCLUDEPATH)
  LIBS *= -L$${GLUT_PATH}\lib -lglut32
  export(LIBS)
}

defineTest( acg ) {
  DEFINES *= INCLUDE_TEMPLATES
  DEFINES *= _USE_MATH_DEFINES NOMINMAX
  export(DEFINES)
  contains( OPENFLIPPER , OpenFlipper ){
    LIBS+= -L$${TOPDIR}/OpenFlipper/$${BUILDDIRECTORY} -lACG
#    message(Using internal ACG Library of OpenFlipper)
  } else {
    QMAKE_LIBDIR += $${TOPDIR}/ACG/lib/$${BUILDDIRECTORY}
    LIBS+= -L$${TOPDIR}/ACG/lib/$${BUILDDIRECTORY} -lACG
    export(QMAKE_LIBDIR)
  }
  export(LIBS)
}

defineTest( openmesh ) {
  contains( OPENFLIPPER , OpenFlipper ){
#    message(Using internal OpenMesh Library of OpenFlipper)
    LIBS+= -L$${TOPDIR}/OpenFlipper/$${BUILDDIRECTORY} -lCore
  } else {
    QMAKE_LIBDIR += $${TOPDIR}/OpenMesh/Core/lib/$${BUILDDIRECTORY}
    LIBS+= -L$${TOPDIR}/OpenMesh/Core/lib/$${BUILDDIRECTORY} -lCore
    export(QMAKE_LIBDIR)
  }
  
  DEFINES *= INCLUDE_TEMPLATES
  DEFINES *= _USE_MATH_DEFINES NOMINMAX
  
  export(LIBS)
  export(DEFINES)
}

defineTest( qwt ) {

  #######################################
  ## Enter here the correct path to qwt
  #######################################

  QWT_PATH = C:\qwt

  #######################################

  !exists( $${QWT_PATH} ) {
    error( ERROR: qwt not found or wrong path entry in OpenMesh\qmake\packages\packages.Windows! )
  }

  INCLUDEPATH *= $${QWT_PATH}\src
  export(INCLUDEPATH)
  LIBS *= -L$${QWT_PATH}\lib\ -lqwt5
  export(LIBS)
}


defineTest( openmp ) {
	QMAKE_CXXFLAGS_DEBUG += /openmp
	QMAKE_CXXFLAGS_RELEASE += /openmp
	export(QMAKE_CXXFLAGS_DEBUG)
	export(QMAKE_CXXFLAGS_RELEASE)
}

defineTest( gmm ) {

  #######################################
  ## Enter here the correct path to GMM
  #######################################

  GMM_PATH = c:\gmm-3.0

  #######################################

  !exists( $${GMM_PATH} ) {
    error( ERROR: GMM not found or wrong path entry in OpenMesh\qmake\packages\packages.Windows! )
  }

  INCLUDEPATH += $${GMM_PATH}\include\gmm
  DEFINES *= _SCL_SECURE_NO_DEPRECATE
  export(DEFINES) 
  export(INCLUDEPATH)
}

defineTest( wordnet ) {

  ##########################################
  ## Enter here the correct path to wordnet
  ##########################################

  WN_PATH = C:\Program Files\WordNet\2.1

  ##########################################

  !exists( $${WN_PATH} ) {
    error( ERROR: Wordnet not found or wrong path entry in OpenMesh\qmake\packages\packages.Windows! )
  }
  

  INCLUDEPATH *= $${WN_PATH}\src\include
  export(INCLUDEPATH)
  LIBS += -l$${WN_PATH}\lib\wn
  export(LIBS)
}

defineTest( lapack ) {

  ##############################################
  ## Enter here the correct path to lapack libs
  ##############################################

  LAP_LIB_PATH = C:\CLAPACK\LIB\Win32

  ##############################################

  !exists( $${LAP_LIB_PATH} ) {
    error( ERROR: lapack not found or wrong path entry in OpenMesh\qmake\packages\packages.Windows! )
  }

  LIBS *= -L$${LAP_LIB_PATH} -lclapack_nowrap -lblas_nowrap -llibf2c -ltmglib_nowrap
  LIBS *= /NODEFAULTLIB:"libcmt"
  export(LIBS)
}

defineTest( taucs ) {

  #########################################
  ## Enter here the correct path to taucs
  #########################################

  TAUCS_PATH = C:\taucs

  #########################################

  !exists( $${TAUCS_PATH} ) {
    error( ERROR: taucs not found or wrong path entry in OpenMesh\qmake\packages\packages.Windows! )
  }

  LIBS *= -L$${TAUCS_PATH}\lib -llibtaucs
  INCLUDEPATH += $${TAUCS_PATH}\include
  export(INCLUDEPATH)
  export(LIBS)
}

defineTest( superlu ) {

  ###########################################
  ## Enter here the correct path to superlu
  ###########################################

  SLU_PATH = C:\SuperLU_3.0

  ###########################################

  !exists( $${SLU_PATH} ) {
    error( ERROR: SuperLU not found or wrong path entry in OpenMesh\qmake\packages\packages.Windows! )
  }

  INCLUDEPATH *= $${SLU_PATH}
  CONFIG( debug, debug|release ){
    LIBS *= -L$${SLU_PATH}\lib -lSuperLUd
  } else {
    LIBS *= -L$${SLU_PATH}\lib -lSuperLU
  }
  export(INCLUDEPATH)
  export(LIBS)
}

defineTest( physim2 ) {
  REQUIRES += PhysimLibrary
  export(REQUIRES)
  message( TODO : Windows physim2 )
}

defineTest( usb ) {
  REQUIRES += USBLibrary
  export(REQUIRES)
  message( TODO : Windows usb )
}

defineTest( freetype ) {

  ###########################################
  ## Enter here the correct path to freetype
  ###########################################

  FT_PATH = C:\GnuWin32

  ###########################################

  !exists( $${FT_PATH} ) {
    message( WARNING: FreeType not found or wrong path entry in OpenMesh\qmake\packages\packages.Windows! )
    return(false)
  }

  LIBS *= -L$${FT_PATH}\lib -lfreetype
  export(LIBS)
  export(FT_PATH)
}

defineTest( ftgl ) {

  #########################################
  ## Enter here the correct path to FTGL
  #########################################

  FTGL_PATH = C:\ftgl

  #########################################

  !exists( $${FTGL_PATH} ) {
    message( WARNING: FTGL not found or wrong path entry in OpenMesh\qmake\packages\packages.Windows! )
    return(false)
  } else {
    freetype() {
      DEFINES += USE_FTGL
      export(DEFINES)
    } else {
      error ( ERROR: FTGL requires FreeType but FreeType was not found )
    }
  }

  CONFIG( debug, debug|release ){
    LIBS *= -L$${FTGL_PATH}\msvc\Build -lftgl_D
  } else {
    LIBS *= -L$${FTGL_PATH}\msvc\Build -lftgl
  }
  
  INCLUDEPATH *= $${FTGL_PATH}\src $$quote($${FT_PATH}\include) $$quote($${FT_PATH}\include\freetype2) 
  export(LIBS)
  export(INCLUDEPATH)
}



