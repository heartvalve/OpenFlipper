
################################################################################
# functions collecting all headers in the directory
################################################################################

# getFilesFromDir( directory, pattern )
# returns a list of all files matching pattern in directory
defineReplace(getFilesFromDir) {
	dirs       = $$1
  	pattern = $$2

	files =

	for(dir, dirs) {
		found = $$files( $${dir}/$${pattern} ) 
        	 files += $$found
         }

     return( $$files )
}

# addSubdirs(subdirs,deps): Adds directories to the project that depend on
# other directories
defineTest( addSubdirs ) {
    for(subdirs, 1) {
        entries = $$files($$subdirs)
        for(entry, entries) {
            name = $$replace(entry, [/\\\\], _)
            name = $$replace(name, - , _)
            SUBDIRS += $$name
            eval ($${name}.subdir = $$entry)
            for(dep, 2): {
			tempval = $$replace(dep, [/\\\\], _)
			eval ($${name}.depends += $$replace(tempval, - , _) )
		}
            export ($${name}.subdir)
            export ($${name}.depends)
        }
    }
    export (SUBDIRS)
}

defineTest( addLibDebug ) {
  contains( ADDLIBDEBUG , true ) {
     return(true)
  }
  return (false)
}

# given a list of paths and a libname this function checks if the lib is there
# adds the path and returns true if found otherwise false
defineTest( addLib ) {
   
    dirs = $$1
    name = $$2

    ADDLIBFOUNDPATH = 

    # check for the library
    for(dir , dirs) {
        unix {
	   check = $${dir}/lib$${name}.so
        } 
     
        win32 {
           # The name of the lib will end with lib! Not DLL!
           check = $${dir}\\$${name}.lib
        }

        macx {
          # The name of the lib will end with dylib
          check = $${dir}/lib$${name}.dylib

        }

        isEmpty( ADDLIBFOUNDPATH ) {
   	   addLibDebug( ) {
             message( Checking for lib $$name at $$check )
           }

           # Found, so use it
	   exists( $$check ) {
	     addLibDebug( ) {
                message( Found lib $$name at $$check )
             }
             ADDLIBFOUNDPATH = $${dir}
           }

        }
    }

    # Check if we found the library
    !isEmpty( ADDLIBFOUNDPATH ) {

       LIBS         *= -L$${ADDLIBFOUNDPATH} -l$$name
       QMAKE_LIBDIR *= $${ADDLIBFOUNDPATH}
       export(QMAKE_LIBDIR)
       export(LIBS)
       addLibDebug( ) {
          message( Setting LibPath for $$name to $${ADDLIBFOUNDPATH} )
       }
       return(true)       
           
    } else {
       message( Unable to find Library $$name in the following dirs: $$dirs  )
       return(false)
    }

    return(false)

}

defineTest( addInclude ) {

}


defineReplace( getCurrentDir ) {
	DIR = ''
	unix {
		DIR = $$system( pwd )
	}

	win32 {
		DIR = $$system( cd )
	}

	return( $$DIR )    
}
